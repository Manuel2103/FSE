Index: src/main/java/at/itkolleg/JDBCDemo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package at.itkolleg;\r\n\r\nimport java.sql.*;\r\n\r\npublic class JDBCDemo {\r\n\r\n    public static void main(String[] args) {\r\n        System.out.println(\"JDBC Demo!\");\r\n        selectAlldemo();\r\n        insertStudentDemo(\"Maxine Musterfrau\", \"testitest@testy.tt\");\r\n        selectAlldemo();\r\n        updateStudentDemo(1,\"Neuer Name\", \"neueremail@neu.neu\");\r\n        selectAlldemo();\r\n        deleteStudentDemo(5);\r\n        selectAlldemo();\r\n        findAllByNameLike(\"Zeck\");\r\n    }\r\n\r\n    private static void findAllByNameLike(String pattern) {\r\n        System.out.println(\"Find all by Name Demo mit JDBC\");\r\n        String sqlSelectAllPersons = \"SELECT * FROM `student` WHERE  `student`.`name` LIKE ?\";\r\n        String connectionURL = \"jdbc:mysql://localhost:3306/jdbcdemo\";\r\n        String user = \"root\";\r\n        String pw = \"\";\r\n        try (Connection conn = DriverManager.getConnection(connectionURL,\"root\", \"\")){\r\n            System.out.println(\"Verbindung zur DB hergestellt!\");\r\n            //SQL Statement vorbereiten\r\n            PreparedStatement preparedStatement = conn.prepareStatement(sqlSelectAllPersons);\r\n            preparedStatement.setString(1,\"%\"+pattern+\"%\");\r\n            //Abfrage executen\r\n            ResultSet rs = preparedStatement.executeQuery();\r\n            //Durch das ResultSet iterieren mit .next()\r\n            while (rs.next()){\r\n                int id = rs.getInt(\"id\");\r\n                String name = rs.getString(\"name\");\r\n                String email = rs.getString(\"email\");\r\n                System.out.println(\"Student aus der DB: ID: \" + id + \" Name: \" + name + \" EMAIL: \" + email);\r\n            }\r\n        }catch (SQLException e)\r\n        {\r\n            System.out.println(\"Fehler beim Aufbau der Verbindung zur DB: \" + e.getMessage());\r\n        }\r\n\r\n    }\r\n\r\n    public static void deleteStudentDemo(int studentID){\r\n        System.out.println(\"Delete Demo mit JDBC\");\r\n        String connectionURL = \"jdbc:mysql://localhost:3306/jdbcdemo\";\r\n        String user = \"root\";\r\n        String pw = \"\";\r\n        try (Connection conn = DriverManager.getConnection(connectionURL,\"root\", \"\")){\r\n            System.out.println(\"Verbindung zur DB hergestellt!\");\r\n            //SQL Statement vorbereiten\r\n            PreparedStatement preparedStatement = conn.prepareStatement(\"DELETE FROM `student` WHERE `student`.`id` = ?\");\r\n            try {\r\n                //Fragezeichen auffüllen\r\n                preparedStatement.setInt(1, studentID);\r\n                // Statement ausführen\r\n                int rowAffected = preparedStatement.executeUpdate();\r\n                System.out.println(\"Anzahl der gelöschten Zeilen\" + rowAffected);\r\n            }catch (SQLException ex) {\r\n                System.out.println(\"Fehler im der SQL-Delete Statement: \" + ex.getMessage());\r\n            }\r\n        }catch (SQLException e)\r\n        {\r\n            System.out.println(\"Fehler beim Aufbau der Verbindung zur DB: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    public static void updateStudentDemo(int id, String neuername, String neueemail){\r\n        System.out.println(\"Update Demo mit JDBC\");\r\n        String connectionURL = \"jdbc:mysql://localhost:3306/jdbcdemo\";\r\n        String user = \"root\";\r\n        String pw = \"\";\r\n        try (Connection conn = DriverManager.getConnection(connectionURL,\"root\", \"\")){\r\n            System.out.println(\"Verbindung zur DB hergestellt!\");\r\n            //SQL Statement vorbereiten\r\n            PreparedStatement preparedStatement = conn.prepareStatement(\"UPDATE `student`SET `name` = ?, `email`= ? WHERE `student`.`id` = ?\");\r\n            try {\r\n\r\n                preparedStatement.setString(1, neuername);\r\n                preparedStatement.setString(2, neueemail);\r\n                preparedStatement.setInt(3, id);\r\n                int affectedRows = preparedStatement.executeUpdate();\r\n                System.out.println(affectedRows + \" Datensätze geändert.\");\r\n\r\n            }catch (SQLException ex) {\r\n                System.out.println(\"Fehler im der SQL-update Statement: \" + ex.getMessage());\r\n            }\r\n        }catch (SQLException e)\r\n        {\r\n            System.out.println(\"Fehler beim Aufbau der Verbindung zur DB: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    public static void insertStudentDemo(String name, String email){\r\n        System.out.println(\"Insert Demo mit JDBC\");\r\n        String connectionURL = \"jdbc:mysql://localhost:3306/jdbcdemo\";\r\n        String user = \"root\";\r\n        String pw = \"\";\r\n        try (Connection conn = DriverManager.getConnection(connectionURL,\"root\", \"\")){\r\n            System.out.println(\"Verbindung zur DB hergestellt!\");\r\n            //SQL Statement vorbereiten\r\n            PreparedStatement preparedStatement = conn.prepareStatement(\"INSERT INTO `student` (`id`, `name`, `email`) VALUES (NULL, ?, ?)\");\r\n            try {\r\n                preparedStatement.setString(1, name);\r\n                preparedStatement.setString(2, email);\r\n                int rowAffected = preparedStatement.executeUpdate();\r\n                System.out.println(\"Datensätze eingefügt: \" + rowAffected);\r\n\r\n            }catch (SQLException ex) {\r\n                System.out.println(\"Fehler im der SQL-INSERT Statement: \" + ex.getMessage());\r\n            }\r\n        }catch (SQLException e)\r\n        {\r\n            System.out.println(\"Fehler beim Aufbau der Verbindung zur DB: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n\r\n    public static void selectAlldemo(){\r\n        System.out.println(\"Select Demo mit JDBC\");\r\n        String sqlSelectAllPersons = \"SELECT * FROM `student`\";\r\n        String connectionURL = \"jdbc:mysql://localhost:3306/jdbcdemo\";\r\n        String user = \"root\";\r\n        String pw = \"\";\r\n        try (Connection conn = DriverManager.getConnection(connectionURL,\"root\", \"\")){\r\n            System.out.println(\"Verbindung zur DB hergestellt!\");\r\n            //SQL Statement vorbereiten\r\n            PreparedStatement preparedStatement = conn.prepareStatement(sqlSelectAllPersons);\r\n            //Abfrage executen\r\n            ResultSet rs = preparedStatement.executeQuery();\r\n            //Durch das ResultSet iterieren mit .next()\r\n            while (rs.next()){\r\n               int id = rs.getInt(\"id\");\r\n               String name = rs.getString(\"name\");\r\n               String email = rs.getString(\"email\");\r\n               System.out.println(\"Student aus der DB: ID: \" + id + \" Name: \" + name + \" EMAIL: \" + email);\r\n            }\r\n        }catch (SQLException e)\r\n        {\r\n            System.out.println(\"Fehler beim Aufbau der Verbindung zur DB: \" + e.getMessage());\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/itkolleg/JDBCDemo.java b/src/main/java/at/itkolleg/JDBCDemo.java
--- a/src/main/java/at/itkolleg/JDBCDemo.java	(revision ef040d8da67803208f9133b5a90081870294004c)
+++ b/src/main/java/at/itkolleg/JDBCDemo.java	(date 1669198400258)
@@ -16,7 +16,7 @@
         findAllByNameLike("Zeck");
     }
 
-    private static void findAllByNameLike(String pattern) {
+    public static void findAllByNameLike(String pattern) {
         System.out.println("Find all by Name Demo mit JDBC");
         String sqlSelectAllPersons = "SELECT * FROM `student` WHERE  `student`.`name` LIKE ?";
         String connectionURL = "jdbc:mysql://localhost:3306/jdbcdemo";
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"b98e7a4f-1393-4bab-97ef-a337ee52d774\" name=\"Changes\" comment=\"Daten ändern + löschen + Funktionen Erweiterung mit Parameter\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/at/itkolleg/JDBCDemo.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/at/itkolleg/JDBCDemo.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/at/itkolleg/JDBCDemo.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/at/itkolleg/JDBCDemo.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../../../../README.md\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../../../../README.md\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$/../../../..\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2HwG9r80gCkY09zrOKMPzD91iCc\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"ASKED_ADD_EXTERNAL_FILES\": \"true\",\r\n    \"ASKED_SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"WebServerToolWindowFactoryState\": \"false\",\r\n    \"last_opened_file_path\": \"E:/manue/Imst/Kolleg/AAIF_Semster_5_6/FSE_Land/FSE/Datenpersistenz/JDBC_Intro/jdbcdemo/jdbcdemo\",\r\n    \"nodejs_package_manager_path\": \"npm\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"JDBCDemo\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"at.itkolleg.JDBCDemo\" />\r\n      <module name=\"jdbcdemo\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"at.itkolleg.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.JDBCDemo\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"b98e7a4f-1393-4bab-97ef-a337ee52d774\" name=\"Changes\" comment=\"\" />\r\n      <created>1669188585333</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1669188585333</updated>\r\n      <workItem from=\"1669188587140\" duration=\"4315000\" />\r\n      <workItem from=\"1669193030767\" duration=\"72000\" />\r\n      <workItem from=\"1669193139566\" duration=\"4929000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Entwicklungsumgebung einrichten (JDBC Dependency hinzugfügt), Erste Verbindung zur Datenbank hergestellt\">\r\n      <created>1669191666386</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1669191666386</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Daten abfragen 1\">\r\n      <created>1669193099795</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1669193099795</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Refactor Name\">\r\n      <created>1669193176638</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1669193176638</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Refactor Name\">\r\n      <created>1669193197651</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1669193197651</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Refactor Name\">\r\n      <created>1669193235502</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1669193235502</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Daten einfügen\">\r\n      <created>1669194417263</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1669194417263</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Daten ändern + löschen + Funktionen Erweiterung mit Parameter\">\r\n      <created>1669196900673</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1669196900673</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"8\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"Entwicklungsumgebung einrichten (JDBC Dependency hinzugfügt), Erste Verbindung zur Datenbank hergestellt\" />\r\n    <MESSAGE value=\"Daten abfragen 1\" />\r\n    <MESSAGE value=\"Refactor Name\" />\r\n    <MESSAGE value=\"Daten einfügen\" />\r\n    <MESSAGE value=\"Daten ändern + löschen + Funktionen Erweiterung mit Parameter\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Daten ändern + löschen + Funktionen Erweiterung mit Parameter\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision ef040d8da67803208f9133b5a90081870294004c)
+++ b/.idea/workspace.xml	(date 1669198432711)
@@ -4,10 +4,9 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="b98e7a4f-1393-4bab-97ef-a337ee52d774" name="Changes" comment="Daten ändern + löschen + Funktionen Erweiterung mit Parameter">
+    <list default="true" id="b98e7a4f-1393-4bab-97ef-a337ee52d774" name="Changes" comment="Daten abfragen 2 (findAllByNameLike)">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/at/itkolleg/JDBCDemo.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/at/itkolleg/JDBCDemo.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/at/itkolleg/JDBCDemo.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/at/itkolleg/JDBCDemo.class" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/../../../../README.md" beforeDir="false" afterPath="$PROJECT_DIR$/../../../../README.md" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -78,7 +77,7 @@
       <updated>1669188585333</updated>
       <workItem from="1669188587140" duration="4315000" />
       <workItem from="1669193030767" duration="72000" />
-      <workItem from="1669193139566" duration="4929000" />
+      <workItem from="1669193139566" duration="5289000" />
     </task>
     <task id="LOCAL-00001" summary="Entwicklungsumgebung einrichten (JDBC Dependency hinzugfügt), Erste Verbindung zur Datenbank hergestellt">
       <created>1669191666386</created>
@@ -129,7 +128,14 @@
       <option name="project" value="LOCAL" />
       <updated>1669196900673</updated>
     </task>
-    <option name="localTasksCounter" value="8" />
+    <task id="LOCAL-00008" summary="Daten abfragen 2 (findAllByNameLike)">
+      <created>1669198116596</created>
+      <option name="number" value="00008" />
+      <option name="presentableId" value="LOCAL-00008" />
+      <option name="project" value="LOCAL" />
+      <updated>1669198116596</updated>
+    </task>
+    <option name="localTasksCounter" value="9" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -153,6 +159,7 @@
     <MESSAGE value="Refactor Name" />
     <MESSAGE value="Daten einfügen" />
     <MESSAGE value="Daten ändern + löschen + Funktionen Erweiterung mit Parameter" />
-    <option name="LAST_COMMIT_MESSAGE" value="Daten ändern + löschen + Funktionen Erweiterung mit Parameter" />
+    <MESSAGE value="Daten abfragen 2 (findAllByNameLike)" />
+    <option name="LAST_COMMIT_MESSAGE" value="Daten abfragen 2 (findAllByNameLike)" />
   </component>
 </project>
\ No newline at end of file
Index: ../../../../README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># FSE\r\n\r\nDokumentation und Mitschrift für fortgeschrittene Software Entwicklung.\r\n\r\nManuel Foidl\r\n\r\n# Inhaltsverzeichnis\r\n\r\n* [Datenpersistenz](#datenpersistenz)\r\n\r\n## Datenpersistenz (JDBC)\r\n\r\n\r\n### Entwicklungsumgebung einrichten\r\n\r\nIn diesem Abschnitt wird die Einrichtung der Entwicklungsumgebung für die JDBC (Java Database Connectivity).\r\n\r\nEs wird XAMPP für die eine Instanz einer Datenbank verwendet. XAMPP wird nicht vollständig verwendet, sonder nur der Webserver und die Datenbank.\r\n\r\nAls Entwicklungsumgebung wird IntelliJ verwendet mit dem Buildtool Maven. In der pom.xml wird die MySqlConnector Dependency eingebunden.\r\n\r\n### Datenbankverbindung herstellen\r\n\r\nIn diesem Teil wird eine Verbindung zu einer Datenbank erstellt.\r\n\r\n**Datenbank vorbereiten**\r\n\r\nUm eine Verbindung mit einer Datenbank zu erstellen muss zuerst eine erstellt werden. Dazu haben wird phpMyAdmin von XAMPP verwendet. Dort wird eine Datenbank mit einer Tabelle erstellt auf die zugegriffen werden soll.\r\n\r\n**Verbindung herstellen in JAVA**\r\n\r\nFür die Verbindung benötigt man eine ConnectionURL, damit JAVA weiß wo sich die Datenbank befindet. Weiters wird ein User und das Passwort benötigt. \r\nEine Verbindung könnte zum Beispiel so aussehen: \r\n\r\n```JAVA\r\n String connectionURL = \"jdbc:mysql://localhost:3306/jdbcdemo\";\r\n        String user = \"root\";\r\n        String pw = \"\";\r\n        try (Connection conn = DriverManager.getConnection(connectionURL,\"root\", \"\")){\r\n\r\n            System.out.println(\"Verbindung zur DB hergestellt!\");\r\n        }catch (SQLException e)\r\n        {\r\n            System.out.println(\"Fehler beim Aufbau der Verbindung zur DB: \" + e.getMessage());\r\n        }\r\n```\r\n\r\n### Daten abfragen\r\n\r\nDas Abfragen von Daten der Datenbank wird in diesem Bereich dokumentiert.\r\n\r\nAls erstes muss ein PreparedStatement erstellt werden. Dazu wird auf unser connection die PrepareStatement Funktion aufgerufen und ein SQL Statement übergeben. Dieses Statement wird dann mit der Funktion executeQuery an dem preparedStatement aufgerufen. Als Ergebnis wird ein ResultSet zurückgegeben. Mithilfe einer while Schleife und der next Funktion kann durch das Ergebnis der Abfrage iteriert werden. Die einzelnen Daten werden mit einer Get Methode und dem Namen oder Nummer der Spalte ausgelesen. Der Code kann folgendermaßen aussehen.\r\n```java\r\n PreparedStatement preparedStatement = conn.prepareStatement(sqlSelectAllPersons);\r\n            //Abfrage executen\r\n            ResultSet rs = preparedStatement.executeQuery();\r\n            //Durch das ResultSet iterieren mit .next()\r\n            while (rs.next()){\r\n               int id = rs.getInt(\"id\");\r\n               String name = rs.getString(\"name\");\r\n               String email = rs.getString(\"email\");\r\n               System.out.println(\"Student aus der DB: ID: \" + id + \" Name: \" + name + \" EMAIL: \" + email);\r\n            }\r\n\r\n```\r\n\r\n### Daten hinzufügen\r\n\r\nÄhnlich wie das Abfragen von Daten wird zuerst eine Verbindung zu der Datenbank hergestellt. Es wird auch PreparedStatement erstellt wobei die zu einfügenden Daten nicht direkt in das Insert Statement geschrieben werden, sonder ? als Placeholder. Dies verhindert eine SQL Injektion und die Geschwindigkeit erhöht, da das Statement schon vorgeladen ist. Damit das Einfügen auch gemacht wird muss am preparedStatement executeUpdate aufgerufen werden. Diese Funktion gibt einen Integer zurück wie viele Zeile betroffen waren. Beispiel Code: \r\n```Java\r\n //SQL Statement vorbereiten\r\n            PreparedStatement preparedStatement = conn.prepareStatement(\"INSERT INTO `student` (`id`, `name`, `email`) VALUES (NULL, ?, ?)\");\r\n            try {\r\n                preparedStatement.setString(1, \"Peter Zeck\");\r\n                preparedStatement.setString(2, \"p.zeck@gmail.com\");\r\n                int rowAffected = preparedStatement.executeUpdate();\r\n                System.out.println(\"Datensätze eingefügt: \" + rowAffected);\r\n\r\n            }catch (SQLException ex) {\r\n                System.out.println(\"Fehler im der SQL-INSERT Statement: \" + ex.getMessage());\r\n            }\r\n```\r\n\r\n### Daten ändern\r\n\r\nUm Daten zu ändern wird wieder eine Verbindung zu Datenbank erstellt. Danach wird ein preparedStatement mit einem UPDATE erstellt, wobei die Daten wieder mit einem ? später eingefügt werden. Die Daten werden mit set Funktionen eingefügt und die Anzahl der aktualisierten Daten wird mit der executeUpdate Methode zurückgegeben. \r\n\r\n```java\r\nPreparedStatement preparedStatement = conn.prepareStatement(\"UPDATE `student`SET `name` = ?, `email`= ? WHERE `student`.`id` = 5\");\r\n            try {\r\n\r\n                preparedStatement.setString(1, \"Hans Zimmer\");\r\n                preparedStatement.setString(2, \"Hans@zimmer.home\");\r\n                int affectedRows = preparedStatement.executeUpdate();\r\n                System.out.println(affectedRows + \" Datensätze geändert.\");\r\n\r\n            }catch (SQLException ex) {\r\n                System.out.println(\"Fehler im der SQL-update Statement: \" + ex.getMessage());\r\n            }\r\n```\r\n\r\n### Daten löschen\r\n\r\nDaten können gelöscht werden, wenn eine Verbindung zur Datenbank besteht und ein korrektes DELETE Statement als preparedStatement verwendet wird. Die Funktion wurde erweitert, indem jetzt Parameter übergeben werden können die bestimmen welcher Datensatz gelöscht werden soll.\r\n\r\n```java\r\nPreparedStatement preparedStatement = conn.prepareStatement(\"DELETE FROM `student` WHERE `student`.`id` = ?\");\r\n    try {\r\n        //Fragezeichen auffüllen\r\n        preparedStatement.setInt(1, studentID);\r\n        // Statement ausführen\r\n        int rowAffected = preparedStatement.executeUpdate();\r\n        System.out.println(\"Anzahl der gelöschten Zeilen\" + rowAffected);\r\n    }catch (SQLException ex) {\r\n        System.out.println(\"Fehler im der SQL-Delete Statement: \" + ex.getMessage());\r\n    }\r\n```\r\n\r\n### Daten abfragen 2\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../../../README.md b/../../../../README.md
--- a/../../../../README.md	(revision ef040d8da67803208f9133b5a90081870294004c)
+++ b/../../../../README.md	(date 1669198427516)
@@ -118,6 +118,35 @@
 
 ### Daten abfragen 2
 
+Der Aufbau dieser Funktion ändert sich nicht von [Daten abfragen](#daten-abfragen). Es ändert sich nur die Abfrage und es kann ein Parameter übergeben werden. Dieser Parameter bestimmt nach was gesucht werden soll. Das Select Statement ist so eingestellt, dass alle Ergebnisse die irgendwo diese Zeichenkette aufweisen, ausgegeben werden. 
+
+```java
+public static void findAllByNameLike(String pattern) {
+        System.out.println("Find all by Name Demo mit JDBC");
+        String sqlSelectAllPersons = "SELECT * FROM `student` WHERE  `student`.`name` LIKE ?";
+        String connectionURL = "jdbc:mysql://localhost:3306/jdbcdemo";
+        String user = "root";
+        String pw = "";
+        try (Connection conn = DriverManager.getConnection(connectionURL,"root", "")){
+            System.out.println("Verbindung zur DB hergestellt!");
+            //SQL Statement vorbereiten
+            PreparedStatement preparedStatement = conn.prepareStatement(sqlSelectAllPersons);
+            preparedStatement.setString(1,"%"+pattern+"%");
+            //Abfrage executen
+            ResultSet rs = preparedStatement.executeQuery();
+            //Durch das ResultSet iterieren mit .next()
+            while (rs.next()){
+                int id = rs.getInt("id");
+                String name = rs.getString("name");
+                String email = rs.getString("email");
+                System.out.println("Student aus der DB: ID: " + id + " Name: " + name + " EMAIL: " + email);
+            }
+        }catch (SQLException e)
+        {
+            System.out.println("Fehler beim Aufbau der Verbindung zur DB: " + e.getMessage());
+        }
+```
+
 
 
 
